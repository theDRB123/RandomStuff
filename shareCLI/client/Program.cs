using System.Net.WebSockets;
using System.Text;
using Microsoft.VisualBasic;
using Spectre.Console;
/* 
Server:
    ConnectionList: 
        -> Username , IP , Hostname , WebSocket
    
    ChatRooms:
        -> RoomName 
        -> ConnectionList
        -> MessageData(JSON):
                -> Sender , Time , Message...
        -> 

# File Sharing Functionalities:
    # server will act as a mediator
    # Server will allocate the public keys to clients (the private keys will be generated by the clients themselves)
    # First a private room between the sender(s) and receiver(s) will be created
        -> Sennder sends a File Request in the room:
            [request] => fs||sender||receiver||filename||datetime
            -> Server sends the request to the receiver(s)
                -> If the receiver accepts the request:
                    -> Connection between client & receiver is established
                    -> Communication handled client to client occurs and and the file is transferred
            -> During the communication, the clients will be connected to server but server cannot see the files...


    # Admin Options:
        -> can create rooms, can remove and add clients to rooms
        -> can remove clients from the server
        -> can send a message to all clients
        -> can send a message to all clients in a room
        -> can send a message to a specific client
        -> Basic blocking and unblocking of clients


# Client Functionalities:
    # Client will be able to connect to the server
    # Client will be able to join server rooms
    # Client will be able to send messages in the server rooms
    # Client will be able to send direct messages to other clients
    # Can get a list of all rooms
    # can get a list of all clients in a room / or all the clients on the server
    # can host a private room
    # can join a private room
    # can send a file request to another client
        ->Will have end to end encryption
        ->Will utilize file compression algos
    # can accept a file request from another client
    # Can act as a server if necessary


# client side format:
    -- Enter the serverCLI address[IP/Localhost/URL]: ____
    -- Enter username: _____ 
    
    The buffer which will be re-rendered every few seconds will look something like ....
    \\\\\\\\\\\\\\\\\\\\\\\Server Name\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\Server Status     : Active                                \\
    \\Total Connections : 104                                   \\
    \\Room              : Chat Room 1                           \\ 
    \\Room Connections  : 13                                    \\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\ Message List \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\\\send scrollMode to scroll messages\\\\\\\\\\\\\\\\\\\\\\\\
    Send Command ---> _________________
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

[info page]
    \\\\\\\\\\\--server name   \\\\\\\\\\\\\ 
    \\--Total Rooms        --Total clients\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\                                    \\
    \\Server Status : Active              \\
    \\Server Address: 000.000.000.000     \\
    \\Server Uptime: 34min 21s            \\
    \\                                    \\
    \\                                    \\
    \\                                    \\
    \\                                    \\
    \\                                    \\
    \\                                    \\
    \\send :hp to get help                \\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    --> [Command Box]
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
*/
static async Task Main()
{
    ConsoleUtils.ConsoleWindowManager infoPage = new();
    ConsoleUtils.ConsoleWindow serverInfoWindow = new(0, 0, 50, 3);
    serverInfoWindow.Header = "Server Name";
    serverInfoWindow.AddText("[2]Total Rooms[/]" + "          " + "[2]Total Clients[/]");
    ConsoleUtils.ConsoleWindow serverInfoExtra = new(0, 3, 50, 13);
    // serverInfoExtra.AddParsedText("||||||");
    serverInfoExtra.AddText("[3]Server Status[/]" + " : [1]Active[/]");
    serverInfoExtra.AddText("[3]Server Address[/]" + " : [1]000.000.000.000[/]");
    serverInfoExtra.AddText("[3]Server Uptime[/]" + " : [1]34min 21s[/]");
    // serverInfoExtra.AddText("send :hp to get help");
    serverInfoExtra.AddText("Hello World!!");
    infoPage.AddWindow(ref serverInfoWindow);
    infoPage.AddWindow(ref serverInfoExtra);

    ConsoleUtils.ConsoleWindow inputPanel = new(0, 16, 50, 3);
    inputPanel.AddText("[3]Command:->[/]");

    infoPage.AddWindow(ref inputPanel);

    infoPage.DrawWindows();

    while (true)
    {
        string input = Console.ReadLine();
        serverInfoExtra.AddText(input);
        serverInfoExtra.ScrollBuffer(1);
        infoPage.DrawWindows();
    }
    Console.ReadLine();
}

Main().Wait();
