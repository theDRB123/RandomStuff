using System.Net.WebSockets;
using System.Text;
using Microsoft.VisualBasic;
using Spectre.Console;
/* 
Server:
    ConnectionList: 
        -> Username , IP , Hostname , WebSocket
    
    ChatRooms:
        -> RoomName 
        -> ConnectionList
        -> MessageData(JSON):
                -> Sender , Time , Message...
        -> 

# File Sharing Functionalities:
    # server will act as a mediator
    # Server will allocate the public keys to clients (the private keys will be generated by the clients themselves)
    # First a private room between the sender(s) and receiver(s) will be created
        -> Sennder sends a File Request in the room:
            [request] => fs||sender||receiver||filename||datetime
            -> Server sends the request to the receiver(s)
                -> If the receiver accepts the request:
                    -> Connection between client & receiver is established
                    -> Communication handled client to client occurs and and the file is transferred
            -> During the communication, the clients will be connected to server but server cannot see the files...


    # Admin Options:
        -> can create rooms, can remove and add clients to rooms
        -> can remove clients from the server
        -> can send a message to all clients
        -> can send a message to all clients in a room
        -> can send a message to a specific client
        -> Basic blocking and unblocking of clients


# Client Functionalities:
    # Client will be able to connect to the server
    # Client will be able to join server rooms
    # Client will be able to send messages in the server rooms
    # Client will be able to send direct messages to other clients
    # Can get a list of all rooms
    # can get a list of all clients in a room / or all the clients on the server
    # can host a private room
    # can join a private room
    # can send a file request to another client
        ->Will have end to end encryption
        ->Will utilize file compression algos
    # can accept a file request from another client
    # Can act as a server if necessary


# client side format:
    -- Enter the serverCLI address[IP/Localhost/URL]: ____
    -- Enter username: _____ 
    
    The buffer which will be re-rendered every few seconds will look something like ....
    \\\\\\\\\\\\\\\\\\\\\\\Server Name\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\Server Status     : Active                                \\
    \\Total Connections : 104                                   \\
    \\Room              : Chat Room 1                           \\ 
    \\Room Connections  : 13                                    \\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\ Message List \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\                                                          \\
    \\\\send scrollMode to scroll messages\\\\\\\\\\\\\\\\\\\\\\\\
    Send Command ---> _________________
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

*/
static async Task Main()
{
    ConsoleUtils.ConsoleWindow cw = new(1, 1, 35, 5);
    Console.Clear();
    cw.BorderChar = '/';
    cw.BorderSize = 2;
    cw.Header = "Chat Room 1 45552";
    cw.AddText("Hello");
    cw.AddText("World");

    ConsoleUtils.ConsoleWindow cw2 = new(1,6,35,5);
    cw2.BorderChar = '*';
    cw2.BorderSize = 2;
    cw2.Header = "Chat Room 2 45552";
    cw2.AddText("[0]Hello[/] [3]World[/]");
    cw2.AddText("[1]World[/]");

    cw.DrawWindow();
    cw.DrawText();
    cw2.DrawWindow();
    cw2.DrawText();
    cw2.DrawWindow();
    cw2.DrawText();
    Console.ReadKey();
}

Main().Wait();



public class ConsoleUtils()
{
    public class ConsoleWindow(int xpos, int ypos, int width, int height)
    {
        //window will have a border and a text area;
        private readonly int xpos = xpos;
        private readonly int ypos = ypos;
        private readonly int width = width;
        private readonly int height = height;
        private readonly int textSlots = height - 2;
        private List<string> textBuffer = [];
        private int offset = 0;
        public void AddText(string text)
        {
            textBuffer.Add(text);
        }
        public void ClearText()
        {
            textBuffer.Clear();
        }
        public void ReplaceBuffer(List<string> buffer)
        {
            textBuffer = buffer;
        }
        public void ScrollBuffer(int direction)
        {
            if (direction == 1)
            {
                if (offset < textBuffer.Count - textSlots)
                {
                    offset++;
                }
            }
            else if (direction == -1)
            {
                if (offset > 0)
                {
                    offset--;
                }
            }
        }
        private int borderSize = 2;
        public int BorderSize
        {
            get => borderSize;
            set
            {
                if (value > 0 && value < 5)
                {
                    borderSize = value;
                }
            }
        }
        private char borderChar = '/';
        public char BorderChar
        {
            get => borderChar;
            set
            {
                if (value != default(char))
                {
                    borderChar = value;
                }
            }
        }
        private string header = "";
        public string Header
        {
            get => header;
            set
            {
                if (value != default(string))
                {
                    header = value;
                }
            }
        }
        public void DrawWindow()
        {
            Console.SetCursorPosition(xpos, ypos);
            int halfwidth = (width + 1) / 2 - (header.Length + 1) / 2;
            string topBorder = new string(borderChar, halfwidth) + header + new string(borderChar, halfwidth);
            Console.WriteLine(topBorder);
            for (int i = 1; i < height; i++)
            {
                Console.SetCursorPosition(xpos, ypos + i);
                Console.WriteLine(new string(borderChar, borderSize) + new string(' ', width - 2 * borderSize) + new string(borderChar, borderSize));
            }
            Console.SetCursorPosition(xpos, ypos + height);
            Console.WriteLine(new string(borderChar, width));
            Console.SetCursorPosition(0, 0);
        }
        public void DrawText()
        {
            for (int i = 0; i < textSlots && i < textBuffer.Count; i++)
            {
                Console.SetCursorPosition(xpos + borderSize, ypos + borderSize + i);
                TextUtil.WriteFormatParsed(textBuffer[i + offset]);
                // Console.WriteLine(textBuffer[i + offset]);
            }
        }


    }


}